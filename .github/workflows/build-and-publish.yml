---
name: 'build on push'

on:
  push:
    branches:
      - main
      - bitte-ein-bit-patch-1

jobs:
  get_manually:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      pull-requests: read
    outputs:
      IMAGES_TO_BUILD: ${{ steps.set_images.outputs.IMAGES_TO_BUILD }}
    steps:
      # Dirty way (Personally I like it)
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Since output of tj-actions/changed-files and
      - name: Get docker image names
        # I'm familiar with python so will use it to parse file names
        # be careful if you have spaces into file names
        shell: python
        env:
          BEFORE: ${{ github.event.before }}
        run: |
          import subprocess
          from os import environ, path
          import json
          import sys

          before = environ.get('BEFORE', '4b825dc642cb6eb9a060e54bf8d69288fbee4904')

          if environ.get('GITHUB_STEP_SUMMARY', '') != '':
              print('GITHUB_STEP_SUMMARY is set to ' + environ.get('GITHUB_STEP_SUMMARY'))
              sys.stdout = open(environ.get('GITHUB_STEP_SUMMARY'), 'a')


          p = subprocess.Popen(['git', 'diff', '--name-only', '-z', before, 'HEAD'], stdout=subprocess.PIPE)
          out, err = p.communicate()
          folders = []

          print(f'These files changed:\n')

          for file in out.decode().split('\0'):
              print(f'* {file}')
              # if file doesn't contain a / it's not a dockerfile to build
              if '/' not in file:
                  continue
              # split the file path into a list
              folder = file.split('/')[0]

              # if the folder is already in the list, skip it
              if folder in folders:
                  continue
              # if the folder contains a file named Dockerfile, add it to the list
              if path.exists(f'{folder}/Dockerfile'):
                  folders.append(folder)

          # print the list of folders
          print(f'Folders to build:\n')
          for folder in folders:
              print(f'* {folder}')

          if environ.get("GITHUB_OUTPUT") is None:
              print('GITHUB_OUTPUT is not set')
              sys.exit(1)
          with open(environ.get("GITHUB_OUTPUT"), 'a') as f:
              f.write('IMAGES_TO_BUILD=' + json.dumps(folders) + '\n')

  print_image_names_with_matrix:
    name: "Build image: ${{ matrix.image }}"
    runs-on: ubuntu-latest
    needs: get_manually
    strategy:
      matrix:
        image: ${{ fromJson( needs.get_manually.outputs.IMAGES_TO_BUILD ) }}

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ matrix.image }}
          flavor: latest=true
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}

      - name: Build and push Docker image ${{ matrix.image }}
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: ${{ matrix.image }}
          file: Dockerfile
          push: true
          tags: ${{ matrix.image }}:${{ github.sha }}
